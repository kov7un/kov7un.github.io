! function(n) {
    "use strict";
    var o = window.minimog.Helpers;
    n(document).ready(function() {
        var e = $minimogLogin.validatorMessages,
            e = (jQuery.extend(jQuery.validator.messages, {
                required: e.required,
                remote: e.remote,
                email: e.email,
                url: e.url,
                date: e.date,
                dateISO: e.dateISO,
                number: e.number,
                digits: e.digits,
                creditcard: e.creditcard,
                equalTo: e.equalTo,
                accept: e.accept,
                maxlength: jQuery.validator.format(e.maxlength),
                minlength: jQuery.validator.format(e.minlength),
                rangelength: jQuery.validator.format(e.rangelength),
                range: jQuery.validator.format(e.range),
                max: jQuery.validator.format(e.max),
                min: jQuery.validator.format(e.min)
            }), n("body")),
            a = n("#modal-user-login"),
            s = n("#modal-user-register"),
            t = n("#modal-user-lost-password");
        a.find(".mo-openid-app-icons .mo_btn-social").removeAttr("style"), a.find(".mo-openid-app-icons .mo_btn-social .mofa").removeAttr("style"), a.find(".mo-openid-app-icons .mo_btn-social svg").removeAttr("style"), a.find("#minimog-login-form").validate({
            rules: {
                user_login: {
                    required: !0
                },
                password: {
                    required: !0
                }
            },
            submitHandler: function(e) {
                var a = n(e),
                    s = a.find('button[type="submit"]');
                n.ajax({
                    url: $minimog.ajaxurl,
                    type: "POST",
                    cache: !1,
                    dataType: "json",
                    data: a.serialize(),
                    success: function(e) {
                        e.success ? (a.find(".form-response-messages").html(e.data.messages).addClass("success").show(), "" !== e.data.redirect_url ? window.location.href = e.data.redirect_url : location.reload()) : (a.find(".form-response-messages").html(e.data.messages).addClass("error").show(), "undefined" != typeof hcaptcha && (e = a.find(".h-captcha").find("iframe").data("hcaptcha-widget-id"), hcaptcha.reset(e)))
                    },
                    beforeSend: function() {
                        a.find(".form-response-messages").html("").removeClass("error success").hide(), o.setElementHandling(s)
                    },
                    complete: function() {
                        o.unsetElementHandling(s)
                    }
                })
            }
        }), e.hasClass("required-login") && !e.hasClass("logged-in") && a.MinimogModal("open"), e.on("click", ".open-modal-login", function(e) {
            e.preventDefault(), e.stopPropagation(), a.MinimogModal("open")
        }), e.on("click", ".open-modal-register", function(e) {
            e.preventDefault(), e.stopPropagation(), s.MinimogModal("open")
        }), e.on("click", ".open-modal-lost-password", function(e) {
            e.preventDefault(), e.stopPropagation(), t.MinimogModal("open")
        }), e.on("click", ".btn-pw-toggle", function(e) {
            e.preventDefault(), e.stopPropagation();
            var e = n(this).parent(".form-input-password"),
                a = e.children("input");
            "password" === a.attr("type") ? (a.attr("type", "text"), e.addClass("show-pw")) : (a.attr("type", "password"), e.removeClass("show-pw"))
        }), s.find("#minimog-register-form").validate({
            rules: {
                fullname: {
                    required: !0
                },
                username: {
                    required: !0,
                    minlength: 4
                },
                email: {
                    required: !0,
                    email: !0
                },
                password: {
                    required: !0,
                    minlength: 8,
                    maxlength: 30
                }
            },
            submitHandler: function(e) {
                var a = n(e),
                    s = a.find('button[type="submit"]');
                n.ajax({
                    url: $minimog.ajaxurl,
                    type: "POST",
                    cache: !1,
                    dataType: "json",
                    data: a.serialize(),
                    success: function(e) {
                        e.success ? (a.find(".form-response-messages").html(e.data.messages).addClass("success").show(), location.reload()) : (a.find(".form-response-messages").html(e.data.messages).addClass("error").show(), "undefined" != typeof hcaptcha && (e = a.find(".h-captcha").find("iframe").data("hcaptcha-widget-id"), hcaptcha.reset(e)))
                    },
                    beforeSend: function() {
                        a.find(".form-response-messages").html("").removeClass("error success").hide(), o.setElementHandling(s)
                    },
                    complete: function() {
                        o.unsetElementHandling(s)
                    }
                })
            }
        }), t.find("#minimog-lost-password-form").on("submit", function(e) {
            e.preventDefault();
            var a = n(this),
                s = a.find('button[type="submit"]');
            n.ajax({
                type: "post",
                url: $minimog.ajaxurl,
                dataType: "json",
                data: a.serialize(),
                success: function(e) {
                    e.success ? a.find(".form-response-messages").html(e.data.messages).addClass("success").show() : (a.find(".form-response-messages").html(e.data.messages).addClass("error").show(), "undefined" != typeof hcaptcha && (e = a.find(".h-captcha").find("iframe").data("hcaptcha-widget-id"), hcaptcha.reset(e)))
                },
                beforeSend: function() {
                    a.find(".form-response-messages").html("").removeClass("error success").hide(), o.setElementHandling(s)
                },
                complete: function() {
                    o.unsetElementHandling(s)
                }
            })
        })
    })
}(jQuery);